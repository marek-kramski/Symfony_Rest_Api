<?php

namespace ApiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    public function getAllMessages()
    {
        $messages = $this->findAll();
        $messageValues = array();
        foreach ($messages as $message) {
            $messageValues[] = array(
                'id' => $message->getId(),
                'content' => $message->getContent(),
                'added' => $message->getAdded(),
            );
        }
        return json_encode(array('message' => $messageValues));
    }

    public function getMessageById($request, $id)
    {
        $message = $this->find($id);
        $uri = $request->getUri();
        $dirName = dirname($uri);
        $currentResourceNext = intval(basename($uri));
        $currentResourcePrev = intval(basename($uri));

        $hal_links = array(
            'self' => array('href' => "$uri"),
        );

        if ($this->getById($currentResourceNext + 1)) {
            $hal_links['next'] = array('href' => "$dirName/" . ($currentResourceNext + 1));
        }
        if (($currentResourcePrev - 1) !== 0) {
            $hal_links['prev'] = array('href' => "$dirName/" . ($currentResourcePrev - 1));
        }

        $messageValues['id'] = $message->getId();
        $messageValues['content'] = $message->getContent();
        $messageValues['added'] = $message->getAdded();


        return json_encode(array('_links' => $hal_links,
            'message' => $messageValues,), JSON_UNESCAPED_SLASHES);
    }

    public function getFormByMessageId($request, $id)
    {
        $message = $this->getById($id);
        $messageObject = $this->find($id);
        $email = $messageObject->getEmail();
        $contactInfo = $this->getEntityManager()->getRepository('ApiBundle:ContactInfo')->getInfoByEmail($email);

        $uri = $request->getUri();
        $dirName = dirname($uri);
        $currentResourceNext = intval(basename($uri));
        $currentResourcePrev = intval(basename($uri));

        $hal_links = array(
            'self' => array('href' => "$uri"),
        );

        if ($this->getById($currentResourceNext + 1)) {
            $hal_links['next'] = array('href' => "$dirName/" . ($currentResourceNext + 1));
        }
        if (($currentResourcePrev - 1) !== 0) {
            $hal_links['prev'] = array('href' => "$dirName/" . ($currentResourcePrev - 1));
        }
        return json_encode(array('_links' => $hal_links, 'message' => $message, 'Contact_info' => $contactInfo), JSON_UNESCAPED_SLASHES);

    }

    private function getById($id)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery('
        SELECT m
        FROM ApiBundle:Message m
        WHERE m.id = :id
        ')->setParameter('id', $id);
        $query->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

        return $query->getResult(Query::HYDRATE_ARRAY);
    }

    public function exists($id)
    {
        $exists = $this->getById($id);
        var_dump($exists);
        return !isset($exists);

    }


}
